import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import F

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
EMPLOYEE_CHAT_ID = os.getenv("EMPLOYEE_CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not TOKEN or TOKEN.strip() == "":
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è!")

if not EMPLOYEE_CHAT_ID or EMPLOYEE_CHAT_ID.strip() == "":
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è EMPLOYEE_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è!")

# –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
TOKEN = TOKEN.strip()
EMPLOYEE_CHAT_ID = int(EMPLOYEE_CHAT_ID.strip())

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∂–¥—ë–º –ª–∏ –æ—Ç–∑—ã–≤)
user_feedback_state = {}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–µ–∏ÃÜ—Ä–æ—Å–µ—Ç–∏ –∏ ¬´–ê—Ç–æ–º¬ª: —Å–∏–Ω–µ—Ä–≥–∏—è –±—É–¥—É—â–µ–≥–æ")],
        [KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
instructions_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìò –ì–∏–¥ –ø–æ ChatGPT")],
        [KeyboardButton(text="üìò –ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø **–ê—Ç–æ–º** ‚Äî –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. ü§ñ\n\n"
        "–ü–æ–∫–∞ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —è —Å—Ç–∞–Ω—É –µ—â–µ –ø–æ–ª–µ–∑–Ω–µ–µ.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é ‚Äî –ø–∏—à–∏—Ç–µ!"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ–∏ÃÜ—Ä–æ—Å–µ—Ç–∏.."
@dp.message(F.text == "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ ¬´–ê—Ç–æ–º¬ª: —Å–∏–Ω–µ—Ä–≥–∏—è –±—É–¥—É—â–µ–≥–æ")
async def meetup_info(message: types.Message):
    response_text = (
        "üì¢ **\"–ù–µ–∏ÃÜ—Ä–æ—Å–µ—Ç–∏ –∏ ¬´–ê—Ç–æ–º¬ª: —Å–∏–Ω–µ—Ä–≥–∏—è –±—É–¥—É—â–µ–≥–æ\"**\n\n"
        "–ù–∞ –≤—Å—Ç—Ä–µ—á–µ –æ–±—Å—É–¥–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ò–ò –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å —Å–∞–º—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ. üöÄ\n\n"
        "üîπ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: 04.03.2025 10:30\n"
        "üîπ –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω\n"
    )
    await message.answer(response_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
@dp.message(F.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_request(message: types.Message):
    user_feedback_state[message.from_user.id] = True  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∂–¥—ë–º –æ—Ç–∑—ã–≤
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º!")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
@dp.message(lambda message: message.from_user.id in user_feedback_state)
async def receive_feedback(message: types.Message):
    user_id = message.from_user.id
    user_feedback_state.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    feedback_text = f"üì© **–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or message.from_user.full_name}:**\n\n{message.text}"
    await bot.send_message(EMPLOYEE_CHAT_ID, feedback_text)

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º. ü§ù", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º"
@dp.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º")
async def show_instructions(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=instructions_keyboard)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìò –ì–∏–¥ –ø–æ ChatGPT"
@dp.message(F.text == "üìò –ì–∏–¥ –ø–æ ChatGPT")
async def send_chatgpt_guide(message: types.Message):
    file_path = "files/chatgpt_register_pay.pdf"  
    try:
        await message.answer_document(types.FSInputFile(file_path), caption="üìò –ì–∏–¥ –ø–æ ChatGPT\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ ChatGPT –∏–∑ –†–æ—Å—Å–∏–∏ üá∑üá∫")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìò –ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot"
@dp.message(F.text == "üìò –ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot")
async def send_bitrix_guide(message: types.Message):
    await message.answer("üìò **–ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot**\n\n"
                         "–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                         "[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏](https://helpdesk.bitrix24.ru/manual/copilot/)", 
                         parse_mode="Markdown")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥" –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
