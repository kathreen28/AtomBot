import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7828644607:AAGLnk_AQJBJKnUlgDxr9oay4Yv5jXrhR-A"

# Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
EMPLOYEE_CHAT_ID = 323429558  

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_meetup = KeyboardButton("–ú–∏—Ç–∞–ø \"–ò–ò –≤ –¥–µ–π—Å—Ç–≤–∏–∏: –ø–æ–¥–∫–ª—é—á–∞–µ–º, —Ç–µ—Å—Ç–∏—Ä—É–µ–º, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º\"")
button_feedback = KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
button_instructions = KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º")
main_keyboard.add(button_meetup, button_feedback, button_instructions)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
instructions_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_chatgpt_guide = KeyboardButton("üìò –ì–∏–¥ –ø–æ ChatGPT")
button_bitrix_guide = KeyboardButton("üìò –ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot")
button_back = KeyboardButton("üîô –ù–∞–∑–∞–¥")
instructions_keyboard.add(button_chatgpt_guide, button_bitrix_guide, button_back)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message(lambda message: message.text == "/start")
async def start_command(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø **–ê—Ç–æ–º** ‚Äî –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. ü§ñ\n\n"
        "–ü–æ–∫–∞ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —è —Å—Ç–∞–Ω—É –µ—â–µ –ø–æ–ª–µ–∑–Ω–µ–µ.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é ‚Äî –ø–∏—à–∏—Ç–µ!"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º"
@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º")
async def show_instructions(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=instructions_keyboard)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìò –ì–∏–¥ –ø–æ ChatGPT"
@dp.message(lambda message: message.text == "üìò –ì–∏–¥ –ø–æ ChatGPT")
async def send_chatgpt_guide(message: types.Message):
    file_path = "files/chatgpt_register_pay.pdf"  
    try:
        await message.answer_document(types.FSInputFile(file_path), caption="üìò –ì–∏–¥ –ø–æ ChatGPT\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ ChatGPT –∏–∑ –†–æ—Å—Å–∏–∏ üá∑üá∫")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot"
@dp.message(lambda message: message.text == "üìò –ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot")
async def send_bitrix_guide(message: types.Message):
    await message.answer("üìò **–ì–∏–¥ –ø–æ –ë–∏—Ç—Ä–∏–∫—Å24 CoPilot**\n\n"
                         "–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                         "[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏](https://helpdesk.bitrix24.ru/manual/copilot/)", 
                         parse_mode="Markdown")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
